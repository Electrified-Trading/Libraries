// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Electrified

// @version=6
// @description Utilities for measuring time.
library("Time")

///////////////////////////////////////////////////
// CONSTANTS
///////////////////////////////////////////////////

// Time unit strings
const string BARS = "bars"
const string SECONDS = "seconds"
const string MINUTES = "minutes"
const string DAYS = "days"
const string WEEKS = "weeks"
const string MONTHS = "months"
const string YEARS = "years"

// Singular forms
const string BAR = "bar"
const string SECOND = "second"
const string MINUTE = "minute"
const string DAY = "day"
const string WEEK = "week"
const string MONTH = "month"
const string YEAR = "year"

///////////////////////////////////////////////////
// TYPES
///////////////////////////////////////////////////

// @enum Time unit types for conversion functions
export enum Unit
    Bars
    Seconds
    Minutes
    Days

///////////////////////////////////////////////////
// @function Gets the number of milliseconds per bar.
export bar() =>
    var int msPerDay = 1000 * 60 * 60 * 24
    var int m = switch
        timeframe.isdaily => msPerDay
        timeframe.isweekly => msPerDay * 7
        timeframe.ismonthly => msPerDay * 30
        timeframe.isseconds => 1000
        timeframe.isminutes => 1000 * 60
        => na
    var value = m * timeframe.multiplier
    value
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// @function Gets the start of the day for the provided time value.
// @param datetime The date/time to acquire the date from.
// @returns The number of milliseconds representing the date for the given value.
export date(int datetime = time) =>
    timestamp(year(datetime), month(datetime), dayofmonth(datetime))
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// @function Gets milliseconds from the start of the day.
// @param datetime The date/time to acquire the time of day from.
// @returns The number of milliseconds representing time of day.
export timeOfDay(int datetime = time) =>
    datetime - date(datetime)
///////////////////////////////////////////////////

// Normalizes timespan and timeframe values.
adjustTimeframe(simple float timespan, simple string unit) =>
    var typeLower = str.lower(unit)
    var ts = switch typeLower
        BAR => BARS
        SECOND => SECONDS
        MINUTE => MINUTES
        DAY => DAYS
        WEEK => WEEKS
        MONTH => MONTHS
        YEAR => YEARS
        => typeLower

    var dayMultiple = switch ts
        WEEKS => 7
        MONTHS => 30
        YEARS => 365
        => 1

    var t = dayMultiple == 1 ? ts : DAYS
    var s = timespan * dayMultiple
    [s,t]
///

///////////////////////////////////////////////////
// @function Returns the number (float) bars that represents the timespan provided.
// @param timespan The number of units to convert to bar count.
// @param unit The type of units to measure. ('Bar', 'Bars', 'Minute', 'Minutes', 'Day' or 'Days')
// @param sessionMinutes Optional override for the number of minutes per session.  (Default: Regular = 390, Extended = 1440)
// @returns The number bars that represents the timespan provided.
export spanToLen(simple float timespan, simple string unit, simple int sessionMinutes = na) =>
    var sess_minutes = na(sessionMinutes)
      ? (syminfo.session == session.regular ? 390 : 1440)
      : sessionMinutes

    var float minutesPerBar = switch
        timeframe.isminutes => timeframe.multiplier
        timeframe.isseconds => timeframe.multiplier / 60
        timeframe.isdaily => sess_minutes
        timeframe.isweekly => sess_minutes * 7
        timeframe.ismonthly => sess_minutes * 30
        => na

    [s, t] = adjustTimeframe(timespan, unit)

    switch t
        BARS => s
        SECONDS => s / minutesPerBar
        MINUTES => s / minutesPerBar
        DAYS => timeframe.isintraday ?
          (sess_minutes * s / minutesPerBar) :
          timeframe.isdaily ? s :
          timeframe.isweekly ? s / 7 :
          timeframe.ismonthly ? s / 30 :
          na
        => na
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// @function Returns the number (float) bars that represents the timespan provided.
// @param timespan The number of units to convert to bar count.
// @param unit The type of units to measure as a Unit enum ('Bars', 'Seconds', 'Minutes', 'Days').
// @param sessionMinutes Optional override for the number of minutes per session.  (Default: Regular = 390, Extended = 1440)
// @returns The number bars that represents the timespan provided.
export spanToLen(simple float timespan, simple Unit unit, simple int sessionMinutes = na) =>
    spanToLen(timespan, str.tostring(unit), sessionMinutes)
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// @function Returns the number (int) bars that represents the timespan provided.
// @param timespan The number of units to convert to bar count.
// @param unit The type of units to measure. ('Bar', 'Minute' or 'Day')
// @returns The number bars that represents the timespan provided.
export spanToIntLen(simple float timespan, simple string unit) =>
    math.ceil(spanToLen(timespan, unit))
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// @function Returns the number (int) bars that represents the timespan provided.
// @param timespan The number of units to convert to bar count.
// @param unit The type of units to measure as a Unit enum ('Bars', 'Seconds', 'Minutes', 'Days').
// @returns The number bars that represents the timespan provided.
export spanToIntLen(simple float timespan, simple Unit unit) =>
    spanToIntLen(timespan, str.tostring(unit))
///////////////////////////////////////////////////

plot(bar())
